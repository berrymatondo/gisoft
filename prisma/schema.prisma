// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Secteur {
  id   Int    @id @default(autoincrement())
  name String @unique
  gis  Gi[]

  personId Int?
  person   Person? @relation(fields: [personId], references: [id])

  createAt  DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Gi {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  persons Person[]
  users   User[]

  secteurId Int?
  secteur   Secteur? @relation(fields: [secteurId], references: [id])

  createAt  DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Person {
  id        Int       @id @default(autoincrement())
  firstname String
  lastname  String
  email     String
  mobile    String
  isPilote  Boolean
  secteurs  Secteur[]

  giId Int?
  gi   Gi?  @relation(fields: [giId], references: [id])

  createAt  DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String?
  email              String?   @unique
  isPilot            Boolean?  @default(false)
  password           String?
  emailVerified      DateTime?
  isTwoFactorEnabled Boolean?  @default(false)

  giId                  Int?
  gi                    Gi?                    @relation(fields: [giId], references: [id])
  role                  Role?                  @default(USER)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
